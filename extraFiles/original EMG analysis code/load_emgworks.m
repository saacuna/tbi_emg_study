function [emg,ax,ay,az]=load_emgworks(infile,inpath)
%   [emg,ax,ay,az]=load_emgworks(infile,inpath)
%   LOAD_EMGWORKS is used to open a csv formateed data file generated by the emgworks
%   software
%   
%   Inputs (optional)
%       infile - file to be loaded
%                If infile is unspecified, the user is prompted to select the input file
%       inpath - directory of location where data file is located
%               when no path is specified, it defaults to current directory
%
%   Outputs:
%       emg   structure containing the emg data
%       ax   structure containing the x-acc data
%       ay   structure containing the y-acc data
%       az   structure containing the z-acc data
%
%       each structure contains file name, time, and data matrix
%       e.g.      emg.file, emg.time, emg.data

narg = nargin;
if (narg==0);
    [infile, inpath]=uigetfile('*.txt','Select input file')
    if isempty(infile)
        disp('No file selected');
        emg=[]; acc=[]; ax=[];  ay=[];  az=[];
        return;
    end
elseif (narg==1);
    if ~strmatch('txt',infile(end-2:end))
        infile = [infile(1:length(infile)) '.txt'];
    end
    inpath=[];
elseif (narg==2);
    if strmatch(infile(end-2:end)~='txt')
        infile = [infile(1:length(infile)) '.txt'];
    end
end

fid = fopen([inpath infile],'r');
if (fid==-1);
    disp('File not found');
    return;
end


% Read in the channel labels first
line=fgetl(fid);
nch=0; npts=0; maxpts=0;
while (line(1:5)~='Start')
    jcolon=find(line==':');
    line(jcolon(2)+6:jcolon(2)+10);
    nch=nch+1;
    ch(nch)=readhdr(line,fid,nch);
    if (ch(nch).npts>maxpts), maxpts=ch(nch).npts;  end
    npts=npts+ch(nch).npts;
    line=fgetl(fid);
end

% Read down to start of data
while (line(1)~='X')
    line=fgetl(fid);
end

% Read in all the data at once
data=zeros(maxpts,2*nch);
k=1;
while ~feof(fid)
    line=fgetl(fid);
    % find then eliminate commas
    jc=[0 find(line==',') length(line)+1];
    line(line==',')=' ';
    % find units
    units=line(jc(2:end)-1);
%     % now eliminate unit signs
    line(line=='m')=' ';
    line(line=='µ')=' ';
    line(line=='n')=' ';
    line(line=='p')=' ';
    line(line=='f')=' ';
    % figure out where the data goes
    kk=(diff(jc)>1);
    data(k,kk)=sscanf(line,'%f',[1 length(kk)]);
    km=(units=='m');  data(k,km)=data(k,km)*.001;
    ku=(units=='µ');  data(k,ku)=data(k,ku)*.000001;
    kn=(units=='n');  data(k,kn)=data(k,kn)*.000000001;
    kp=(units=='p');  data(k,kp)=data(k,kp)*.000000000001;
    kf=(units=='f');  data(k,kf)=data(k,kf)*.000000000000001;
%    disp(data(k,:));
    disp(['line ',num2str(k),' time ',num2str(data(k,1))]);
    k=k+1;
end

% Now distribute the data
jemg=[]; jax=[]; jay=[]; jaz=[];
for i=1:nch
    if strmatch('EMG',ch(i).type); jemg=[jemg i]; end
    if strmatch('ACC X',ch(i).type); jax=[jax i]; end
    if strmatch('ACC Y',ch(i).type); jay=[jay i]; end
    if strmatch('ACC Z',ch(i).type); jaz=[jaz i]; end
end
file=[inpath infile];
emg=ch(jemg);   
for i=1:length(emg); emg(i).file=file;  emg(i).time=data(1:emg(i).npts,jemg(i)*2-1);   emg(i).data=data(1:emg(i).npts,jemg(i)*2); end
ax=ch(jax);   
for i=1:length(ax); ax(i).file=file;   ax(i).time=data(1:ax(i).npts,jax(i)*2-1);   ax(i).data=data(1:ax(i).npts,jax(i)*2); end
ay=ch(jay);   
for i=1:length(ay); ay(i).file=file;   ay(i).time=data(1:ay(i).npts,jay(i)*2-1);   ay(i).data=data(1:ay(i).npts,jay(i)*2); end
az=ch(jaz);   
for i=1:length(az);  az(i).file=file;  az(i).time=data(1:az(i).npts,jaz(i)*2-1);   az(i).data=data(1:az(i).npts,jaz(i)*2); end
clear ch;
clear data;
fclose(fid);


    
function hdr=readhdr(line,fid,nch)
position = ftell(fid);
jcolon=find(line==':');
hdr.label=sscanf(line(jcolon(1)+1:jcolon(2)-1),'%s%c');
hdr.type=sscanf(line(jcolon(2)+6:jcolon(3)-1),'%s%c');
if strmatch('EMG',hdr.type(1:3)) hdr.sensor=sscanf(hdr.type(4:end),'%d');  hdr.type=hdr.type(1:3); end
if strmatch('ACC',hdr.type(1:3)) hdr.sensor=sscanf(hdr.type(6:end),'%d');  hdr.type=hdr.type(1:5);   end
hdr.freq=sscanf(line(jcolon(3)+1:end),'%f');
hdr.npts=sscanf(line(jcolon(4)+1:end),'%f');
hdr.xstart=sscanf(line(jcolon(5)+1:end),'%f');
hdr.unit=sscanf(line(jcolon(6)+1:end),'%s');
hdr.domainunit=sscanf(line(jcolon(7)+1:end),'%s');
n=0;
while(n<nch)
    line=fgetl(fid);
    if strmatch('System',line); 
        n=n+1;
    end
end
jcolon=find(line==':'); hdr.sysgain=sscanf(line(jcolon+1:end),'%f');
line=fgetl(fid);    jcolon=find(line==':'); hdr.adgain=sscanf(line(jcolon+1:end),'%f');
line=fgetl(fid);    jcolon=find(line==':'); hdr.bitres=sscanf(line(jcolon+1:end),'%f');
line=fgetl(fid);    jcolon=find(line==':');	hdr.bias=sscanf(line(jcolon+1:end),'%f');
line=fgetl(fid);    jcolon=find(line==':');	hdr.hpcutoff=sscanf(line(jcolon+1:end),'%f');
line=fgetl(fid);    jcolon=find(line==':');	hdr.lpcutoff=sscanf(line(jcolon+1:end),'%f');
fseek(fid,position,'bof');
